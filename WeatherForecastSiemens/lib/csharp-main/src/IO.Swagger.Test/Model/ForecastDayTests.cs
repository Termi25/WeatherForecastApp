/* 
 * Weather API
 *
 *  # Introduction  WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy.   We provide following data through our API:    * Real-time weather<br />    * 14 day weather forecast<br />    * Astronomy<br />    * Time zone<br />    * Location data<br />    * Search or Autocomplete API<br />    * NEW: Historical weather      * NEW: Future Weather (Upto 300 days ahead)      * Weather Alerts      * Air Quality Data  # Getting Started  You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!  We have [code libraries](https://www.weatherapi.com/docs/code-libraries.aspx) for different programming languages like PHP, .net, JAVA, etc.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).  # Authentication  API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .    ##  key parameter   key=\\<YOUR API KEY\\> 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.Swagger.Api;
using IO.Swagger.Model;
using IO.Swagger.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ForecastDay
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class ForecastDayTests
    {
        // TODO uncomment below to declare an instance variable for ForecastDay
        //private ForecastDay instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of ForecastDay
            //instance = new ForecastDay();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ForecastDay
        /// </summary>
        [Test]
        public void ForecastDayInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" ForecastDay
            //Assert.IsInstanceOfType<ForecastDay> (instance, "variable 'instance' is a ForecastDay");
        }


        /// <summary>
        /// Test the property 'MaxtempC'
        /// </summary>
        [Test]
        public void MaxtempCTest()
        {
            // TODO unit test for the property 'MaxtempC'
        }
        /// <summary>
        /// Test the property 'MaxtempF'
        /// </summary>
        [Test]
        public void MaxtempFTest()
        {
            // TODO unit test for the property 'MaxtempF'
        }
        /// <summary>
        /// Test the property 'MintempC'
        /// </summary>
        [Test]
        public void MintempCTest()
        {
            // TODO unit test for the property 'MintempC'
        }
        /// <summary>
        /// Test the property 'MintempF'
        /// </summary>
        [Test]
        public void MintempFTest()
        {
            // TODO unit test for the property 'MintempF'
        }
        /// <summary>
        /// Test the property 'AvgtempC'
        /// </summary>
        [Test]
        public void AvgtempCTest()
        {
            // TODO unit test for the property 'AvgtempC'
        }
        /// <summary>
        /// Test the property 'AvgtempF'
        /// </summary>
        [Test]
        public void AvgtempFTest()
        {
            // TODO unit test for the property 'AvgtempF'
        }
        /// <summary>
        /// Test the property 'MaxwindMph'
        /// </summary>
        [Test]
        public void MaxwindMphTest()
        {
            // TODO unit test for the property 'MaxwindMph'
        }
        /// <summary>
        /// Test the property 'MaxwindKph'
        /// </summary>
        [Test]
        public void MaxwindKphTest()
        {
            // TODO unit test for the property 'MaxwindKph'
        }
        /// <summary>
        /// Test the property 'TotalprecipMm'
        /// </summary>
        [Test]
        public void TotalprecipMmTest()
        {
            // TODO unit test for the property 'TotalprecipMm'
        }
        /// <summary>
        /// Test the property 'TotalprecipIn'
        /// </summary>
        [Test]
        public void TotalprecipInTest()
        {
            // TODO unit test for the property 'TotalprecipIn'
        }
        /// <summary>
        /// Test the property 'AvgvisKm'
        /// </summary>
        [Test]
        public void AvgvisKmTest()
        {
            // TODO unit test for the property 'AvgvisKm'
        }
        /// <summary>
        /// Test the property 'AvgvisMiles'
        /// </summary>
        [Test]
        public void AvgvisMilesTest()
        {
            // TODO unit test for the property 'AvgvisMiles'
        }
        /// <summary>
        /// Test the property 'Avghumidity'
        /// </summary>
        [Test]
        public void AvghumidityTest()
        {
            // TODO unit test for the property 'Avghumidity'
        }
        /// <summary>
        /// Test the property 'DailyWillItRain'
        /// </summary>
        [Test]
        public void DailyWillItRainTest()
        {
            // TODO unit test for the property 'DailyWillItRain'
        }
        /// <summary>
        /// Test the property 'DailyChanceOfRain'
        /// </summary>
        [Test]
        public void DailyChanceOfRainTest()
        {
            // TODO unit test for the property 'DailyChanceOfRain'
        }
        /// <summary>
        /// Test the property 'DailyWillItSnow'
        /// </summary>
        [Test]
        public void DailyWillItSnowTest()
        {
            // TODO unit test for the property 'DailyWillItSnow'
        }
        /// <summary>
        /// Test the property 'DailyChanceOfSnow'
        /// </summary>
        [Test]
        public void DailyChanceOfSnowTest()
        {
            // TODO unit test for the property 'DailyChanceOfSnow'
        }
        /// <summary>
        /// Test the property 'Condition'
        /// </summary>
        [Test]
        public void ConditionTest()
        {
            // TODO unit test for the property 'Condition'
        }
        /// <summary>
        /// Test the property 'Uv'
        /// </summary>
        [Test]
        public void UvTest()
        {
            // TODO unit test for the property 'Uv'
        }

    }

}

/* 
 * Weather API
 *
 *  # Introduction  WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy.   We provide following data through our API:    * Real-time weather<br />    * 14 day weather forecast<br />    * Astronomy<br />    * Time zone<br />    * Location data<br />    * Search or Autocomplete API<br />    * NEW: Historical weather      * NEW: Future Weather (Upto 300 days ahead)      * Weather Alerts      * Air Quality Data  # Getting Started  You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!  We have [code libraries](https://www.weatherapi.com/docs/code-libraries.aspx) for different programming languages like PHP, .net, JAVA, etc.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).  # Authentication  API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .    ##  key parameter   key=\\<YOUR API KEY\\> 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.Swagger.Api;
using IO.Swagger.Model;
using IO.Swagger.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing Ip
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class IpTests
    {
        // TODO uncomment below to declare an instance variable for Ip
        //private Ip instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of Ip
            //instance = new Ip();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Ip
        /// </summary>
        [Test]
        public void IpInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Ip
            //Assert.IsInstanceOfType<Ip> (instance, "variable 'instance' is a Ip");
        }


        /// <summary>
        /// Test the property '_Ip'
        /// </summary>
        [Test]
        public void _IpTest()
        {
            // TODO unit test for the property '_Ip'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Test]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }
        /// <summary>
        /// Test the property 'ContinentCode'
        /// </summary>
        [Test]
        public void ContinentCodeTest()
        {
            // TODO unit test for the property 'ContinentCode'
        }
        /// <summary>
        /// Test the property 'ContinentName'
        /// </summary>
        [Test]
        public void ContinentNameTest()
        {
            // TODO unit test for the property 'ContinentName'
        }
        /// <summary>
        /// Test the property 'CountryCode'
        /// </summary>
        [Test]
        public void CountryCodeTest()
        {
            // TODO unit test for the property 'CountryCode'
        }
        /// <summary>
        /// Test the property 'CountryName'
        /// </summary>
        [Test]
        public void CountryNameTest()
        {
            // TODO unit test for the property 'CountryName'
        }
        /// <summary>
        /// Test the property 'IsEu'
        /// </summary>
        [Test]
        public void IsEuTest()
        {
            // TODO unit test for the property 'IsEu'
        }
        /// <summary>
        /// Test the property 'GeonameId'
        /// </summary>
        [Test]
        public void GeonameIdTest()
        {
            // TODO unit test for the property 'GeonameId'
        }
        /// <summary>
        /// Test the property 'City'
        /// </summary>
        [Test]
        public void CityTest()
        {
            // TODO unit test for the property 'City'
        }
        /// <summary>
        /// Test the property 'Region'
        /// </summary>
        [Test]
        public void RegionTest()
        {
            // TODO unit test for the property 'Region'
        }
        /// <summary>
        /// Test the property 'Lat'
        /// </summary>
        [Test]
        public void LatTest()
        {
            // TODO unit test for the property 'Lat'
        }
        /// <summary>
        /// Test the property 'Lon'
        /// </summary>
        [Test]
        public void LonTest()
        {
            // TODO unit test for the property 'Lon'
        }
        /// <summary>
        /// Test the property 'TzId'
        /// </summary>
        [Test]
        public void TzIdTest()
        {
            // TODO unit test for the property 'TzId'
        }
        /// <summary>
        /// Test the property 'LocaltimeEpoch'
        /// </summary>
        [Test]
        public void LocaltimeEpochTest()
        {
            // TODO unit test for the property 'LocaltimeEpoch'
        }
        /// <summary>
        /// Test the property 'Localtime'
        /// </summary>
        [Test]
        public void LocaltimeTest()
        {
            // TODO unit test for the property 'Localtime'
        }

    }

}

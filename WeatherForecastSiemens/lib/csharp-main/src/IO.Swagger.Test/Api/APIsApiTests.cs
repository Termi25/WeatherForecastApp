/* 
 * Weather API
 *
 *  # Introduction  WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy.   We provide following data through our API:    * Real-time weather<br />    * 14 day weather forecast<br />    * Astronomy<br />    * Time zone<br />    * Location data<br />    * Search or Autocomplete API<br />    * NEW: Historical weather      * NEW: Future Weather (Upto 300 days ahead)      * Weather Alerts      * Air Quality Data  # Getting Started  You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!  We have [code libraries](https://www.weatherapi.com/docs/code-libraries.aspx) for different programming languages like PHP, .net, JAVA, etc.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).  # Authentication  API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .    ##  key parameter   key=\\<YOUR API KEY\\> 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing APIsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class APIsApiTests
    {
        private APIsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new APIsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of APIsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' APIsApi
            //Assert.IsInstanceOfType(typeof(APIsApi), instance, "instance is a APIsApi");
        }

        /// <summary>
        /// Test Astronomy
        /// </summary>
        [Test]
        public void AstronomyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //DateTime? dt = null;
            //var response = instance.Astronomy(q, dt);
            //Assert.IsInstanceOf<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        /// <summary>
        /// Test ForecastWeather
        /// </summary>
        [Test]
        public void ForecastWeatherTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //int? days = null;
            //DateTime? dt = null;
            //int? unixdt = null;
            //int? hour = null;
            //string lang = null;
            //var response = instance.ForecastWeather(q, days, dt, unixdt, hour, lang);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        /// <summary>
        /// Test FutureWeather
        /// </summary>
        [Test]
        public void FutureWeatherTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //DateTime? dt = null;
            //string lang = null;
            //var response = instance.FutureWeather(q, dt, lang);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        /// <summary>
        /// Test HistoryWeather
        /// </summary>
        [Test]
        public void HistoryWeatherTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //DateTime? dt = null;
            //int? unixdt = null;
            //DateTime? endDt = null;
            //int? unixendDt = null;
            //int? hour = null;
            //string lang = null;
            //var response = instance.HistoryWeather(q, dt, unixdt, endDt, unixendDt, hour, lang);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        /// <summary>
        /// Test IpLookup
        /// </summary>
        [Test]
        public void IpLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //var response = instance.IpLookup(q);
            //Assert.IsInstanceOf<Ip> (response, "response is Ip");
        }
        /// <summary>
        /// Test RealtimeWeather
        /// </summary>
        [Test]
        public void RealtimeWeatherTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //string lang = null;
            //var response = instance.RealtimeWeather(q, lang);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        /// <summary>
        /// Test SearchAutocompleteWeather
        /// </summary>
        [Test]
        public void SearchAutocompleteWeatherTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //var response = instance.SearchAutocompleteWeather(q);
            //Assert.IsInstanceOf<ArrayOfSearch> (response, "response is ArrayOfSearch");
        }
        /// <summary>
        /// Test TimeZone
        /// </summary>
        [Test]
        public void TimeZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //var response = instance.TimeZone(q);
            //Assert.IsInstanceOf<Location> (response, "response is Location");
        }
    }

}

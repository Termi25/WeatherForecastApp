/* 
 * Weather API
 *
 *  # Introduction  WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy.   We provide following data through our API:    * Real-time weather<br />    * 14 day weather forecast<br />    * Astronomy<br />    * Time zone<br />    * Location data<br />    * Search or Autocomplete API<br />    * NEW: Historical weather      * NEW: Future Weather (Upto 300 days ahead)      * Weather Alerts      * Air Quality Data  # Getting Started  You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!  We have [code libraries](https://www.weatherapi.com/docs/code-libraries.aspx) for different programming languages like PHP, .net, JAVA, etc.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).  # Authentication  API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .    ##  key parameter   key=\\<YOUR API KEY\\> 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Ip
    /// </summary>
    [DataContract]
        public partial class Ip :  IEquatable<Ip>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ip" /> class.
        /// </summary>
        /// <param name="ip">ip.</param>
        /// <param name="type">type.</param>
        /// <param name="continentCode">continentCode.</param>
        /// <param name="continentName">continentName.</param>
        /// <param name="countryCode">countryCode.</param>
        /// <param name="countryName">countryName.</param>
        /// <param name="isEu">isEu.</param>
        /// <param name="geonameId">geonameId.</param>
        /// <param name="city">city.</param>
        /// <param name="region">region.</param>
        /// <param name="lat">lat.</param>
        /// <param name="lon">lon.</param>
        /// <param name="tzId">tzId.</param>
        /// <param name="localtimeEpoch">localtimeEpoch.</param>
        /// <param name="localtime">localtime.</param>
        public Ip(string ip = default(string), string type = default(string), string continentCode = default(string), string continentName = default(string), string countryCode = default(string), string countryName = default(string), string isEu = default(string), int? geonameId = default(int?), string city = default(string), string region = default(string), decimal? lat = default(decimal?), decimal? lon = default(decimal?), string tzId = default(string), int? localtimeEpoch = default(int?), string localtime = default(string))
        {
            this._Ip = ip;
            this.Type = type;
            this.ContinentCode = continentCode;
            this.ContinentName = continentName;
            this.CountryCode = countryCode;
            this.CountryName = countryName;
            this.IsEu = isEu;
            this.GeonameId = geonameId;
            this.City = city;
            this.Region = region;
            this.Lat = lat;
            this.Lon = lon;
            this.TzId = tzId;
            this.LocaltimeEpoch = localtimeEpoch;
            this.Localtime = localtime;
        }
        
        /// <summary>
        /// Gets or Sets _Ip
        /// </summary>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public string _Ip { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets ContinentCode
        /// </summary>
        [DataMember(Name="continent_code", EmitDefaultValue=false)]
        public string ContinentCode { get; set; }

        /// <summary>
        /// Gets or Sets ContinentName
        /// </summary>
        [DataMember(Name="continent_name", EmitDefaultValue=false)]
        public string ContinentName { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets CountryName
        /// </summary>
        [DataMember(Name="country_name", EmitDefaultValue=false)]
        public string CountryName { get; set; }

        /// <summary>
        /// Gets or Sets IsEu
        /// </summary>
        [DataMember(Name="is_eu", EmitDefaultValue=false)]
        public string IsEu { get; set; }

        /// <summary>
        /// Gets or Sets GeonameId
        /// </summary>
        [DataMember(Name="geoname_id", EmitDefaultValue=false)]
        public int? GeonameId { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets Lat
        /// </summary>
        [DataMember(Name="lat", EmitDefaultValue=false)]
        public decimal? Lat { get; set; }

        /// <summary>
        /// Gets or Sets Lon
        /// </summary>
        [DataMember(Name="lon", EmitDefaultValue=false)]
        public decimal? Lon { get; set; }

        /// <summary>
        /// Gets or Sets TzId
        /// </summary>
        [DataMember(Name="tz_id", EmitDefaultValue=false)]
        public string TzId { get; set; }

        /// <summary>
        /// Gets or Sets LocaltimeEpoch
        /// </summary>
        [DataMember(Name="localtime_epoch", EmitDefaultValue=false)]
        public int? LocaltimeEpoch { get; set; }

        /// <summary>
        /// Gets or Sets Localtime
        /// </summary>
        [DataMember(Name="localtime", EmitDefaultValue=false)]
        public string Localtime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ip {\n");
            sb.Append("  _Ip: ").Append(_Ip).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ContinentCode: ").Append(ContinentCode).Append("\n");
            sb.Append("  ContinentName: ").Append(ContinentName).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  IsEu: ").Append(IsEu).Append("\n");
            sb.Append("  GeonameId: ").Append(GeonameId).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("  TzId: ").Append(TzId).Append("\n");
            sb.Append("  LocaltimeEpoch: ").Append(LocaltimeEpoch).Append("\n");
            sb.Append("  Localtime: ").Append(Localtime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ip);
        }

        /// <summary>
        /// Returns true if Ip instances are equal
        /// </summary>
        /// <param name="input">Instance of Ip to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ip input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Ip == input._Ip ||
                    (this._Ip != null &&
                    this._Ip.Equals(input._Ip))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ContinentCode == input.ContinentCode ||
                    (this.ContinentCode != null &&
                    this.ContinentCode.Equals(input.ContinentCode))
                ) && 
                (
                    this.ContinentName == input.ContinentName ||
                    (this.ContinentName != null &&
                    this.ContinentName.Equals(input.ContinentName))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.IsEu == input.IsEu ||
                    (this.IsEu != null &&
                    this.IsEu.Equals(input.IsEu))
                ) && 
                (
                    this.GeonameId == input.GeonameId ||
                    (this.GeonameId != null &&
                    this.GeonameId.Equals(input.GeonameId))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Lat == input.Lat ||
                    (this.Lat != null &&
                    this.Lat.Equals(input.Lat))
                ) && 
                (
                    this.Lon == input.Lon ||
                    (this.Lon != null &&
                    this.Lon.Equals(input.Lon))
                ) && 
                (
                    this.TzId == input.TzId ||
                    (this.TzId != null &&
                    this.TzId.Equals(input.TzId))
                ) && 
                (
                    this.LocaltimeEpoch == input.LocaltimeEpoch ||
                    (this.LocaltimeEpoch != null &&
                    this.LocaltimeEpoch.Equals(input.LocaltimeEpoch))
                ) && 
                (
                    this.Localtime == input.Localtime ||
                    (this.Localtime != null &&
                    this.Localtime.Equals(input.Localtime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Ip != null)
                    hashCode = hashCode * 59 + this._Ip.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ContinentCode != null)
                    hashCode = hashCode * 59 + this.ContinentCode.GetHashCode();
                if (this.ContinentName != null)
                    hashCode = hashCode * 59 + this.ContinentName.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.CountryName != null)
                    hashCode = hashCode * 59 + this.CountryName.GetHashCode();
                if (this.IsEu != null)
                    hashCode = hashCode * 59 + this.IsEu.GetHashCode();
                if (this.GeonameId != null)
                    hashCode = hashCode * 59 + this.GeonameId.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.Lat != null)
                    hashCode = hashCode * 59 + this.Lat.GetHashCode();
                if (this.Lon != null)
                    hashCode = hashCode * 59 + this.Lon.GetHashCode();
                if (this.TzId != null)
                    hashCode = hashCode * 59 + this.TzId.GetHashCode();
                if (this.LocaltimeEpoch != null)
                    hashCode = hashCode * 59 + this.LocaltimeEpoch.GetHashCode();
                if (this.Localtime != null)
                    hashCode = hashCode * 59 + this.Localtime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

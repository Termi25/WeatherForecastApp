/* 
 * Weather API
 *
 *  # Introduction  WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy.   We provide following data through our API:    * Real-time weather<br />    * 14 day weather forecast<br />    * Astronomy<br />    * Time zone<br />    * Location data<br />    * Search or Autocomplete API<br />    * NEW: Historical weather      * NEW: Future Weather (Upto 300 days ahead)      * Weather Alerts      * Air Quality Data  # Getting Started  You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!  We have [code libraries](https://www.weatherapi.com/docs/code-libraries.aspx) for different programming languages like PHP, .net, JAVA, etc.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).  # Authentication  API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .    ##  key parameter   key=\\<YOUR API KEY\\> 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ForecastHour
    /// </summary>
    [DataContract]
        public partial class ForecastHour :  IEquatable<ForecastHour>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForecastHour" /> class.
        /// </summary>
        /// <param name="timeEpoch">timeEpoch.</param>
        /// <param name="time">time.</param>
        /// <param name="tempC">tempC.</param>
        /// <param name="tempF">tempF.</param>
        /// <param name="isDay">isDay.</param>
        /// <param name="condition">condition.</param>
        /// <param name="windMph">windMph.</param>
        /// <param name="windKph">windKph.</param>
        /// <param name="windDegree">windDegree.</param>
        /// <param name="windDir">windDir.</param>
        /// <param name="pressureMb">pressureMb.</param>
        /// <param name="pressureIn">pressureIn.</param>
        /// <param name="precipMm">precipMm.</param>
        /// <param name="precipIn">precipIn.</param>
        /// <param name="humidity">humidity.</param>
        /// <param name="cloud">cloud.</param>
        /// <param name="feelslikeC">feelslikeC.</param>
        /// <param name="feelslikeF">feelslikeF.</param>
        /// <param name="windchillC">windchillC.</param>
        /// <param name="windchillF">windchillF.</param>
        /// <param name="heatindexC">heatindexC.</param>
        /// <param name="heatindexF">heatindexF.</param>
        /// <param name="dewpointC">dewpointC.</param>
        /// <param name="dewpointF">dewpointF.</param>
        /// <param name="willItRain">willItRain.</param>
        /// <param name="chanceOfRain">chanceOfRain.</param>
        /// <param name="willItSnow">willItSnow.</param>
        /// <param name="chanceOfSnow">chanceOfSnow.</param>
        /// <param name="visKm">visKm.</param>
        /// <param name="visMiles">visMiles.</param>
        /// <param name="gustMph">gustMph.</param>
        /// <param name="gustKph">gustKph.</param>
        /// <param name="uv">uv.</param>
        public ForecastHour(int? timeEpoch = default(int?), string time = default(string), decimal? tempC = default(decimal?), decimal? tempF = default(decimal?), int? isDay = default(int?), ForecastCondition condition = default(ForecastCondition), decimal? windMph = default(decimal?), decimal? windKph = default(decimal?), int? windDegree = default(int?), string windDir = default(string), int? pressureMb = default(int?), decimal? pressureIn = default(decimal?), int? precipMm = default(int?), int? precipIn = default(int?), int? humidity = default(int?), int? cloud = default(int?), decimal? feelslikeC = default(decimal?), decimal? feelslikeF = default(decimal?), decimal? windchillC = default(decimal?), decimal? windchillF = default(decimal?), decimal? heatindexC = default(decimal?), decimal? heatindexF = default(decimal?), decimal? dewpointC = default(decimal?), decimal? dewpointF = default(decimal?), int? willItRain = default(int?), int? chanceOfRain = default(int?), int? willItSnow = default(int?), int? chanceOfSnow = default(int?), int? visKm = default(int?), int? visMiles = default(int?), int? gustMph = default(int?), decimal? gustKph = default(decimal?), double? uv = default(double?))
        {
            this.TimeEpoch = timeEpoch;
            this.Time = time;
            this.TempC = tempC;
            this.TempF = tempF;
            this.IsDay = isDay;
            this.Condition = condition;
            this.WindMph = windMph;
            this.WindKph = windKph;
            this.WindDegree = windDegree;
            this.WindDir = windDir;
            this.PressureMb = pressureMb;
            this.PressureIn = pressureIn;
            this.PrecipMm = precipMm;
            this.PrecipIn = precipIn;
            this.Humidity = humidity;
            this.Cloud = cloud;
            this.FeelslikeC = feelslikeC;
            this.FeelslikeF = feelslikeF;
            this.WindchillC = windchillC;
            this.WindchillF = windchillF;
            this.HeatindexC = heatindexC;
            this.HeatindexF = heatindexF;
            this.DewpointC = dewpointC;
            this.DewpointF = dewpointF;
            this.WillItRain = willItRain;
            this.ChanceOfRain = chanceOfRain;
            this.WillItSnow = willItSnow;
            this.ChanceOfSnow = chanceOfSnow;
            this.VisKm = visKm;
            this.VisMiles = visMiles;
            this.GustMph = gustMph;
            this.GustKph = gustKph;
            this.Uv = uv;
        }
        
        /// <summary>
        /// Gets or Sets TimeEpoch
        /// </summary>
        [DataMember(Name="time_epoch", EmitDefaultValue=false)]
        public int? TimeEpoch { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public string Time { get; set; }

        /// <summary>
        /// Gets or Sets TempC
        /// </summary>
        [DataMember(Name="temp_c", EmitDefaultValue=false)]
        public decimal? TempC { get; set; }

        /// <summary>
        /// Gets or Sets TempF
        /// </summary>
        [DataMember(Name="temp_f", EmitDefaultValue=false)]
        public decimal? TempF { get; set; }

        /// <summary>
        /// Gets or Sets IsDay
        /// </summary>
        [DataMember(Name="is_day", EmitDefaultValue=false)]
        public int? IsDay { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public ForecastCondition Condition { get; set; }

        /// <summary>
        /// Gets or Sets WindMph
        /// </summary>
        [DataMember(Name="wind_mph", EmitDefaultValue=false)]
        public decimal? WindMph { get; set; }

        /// <summary>
        /// Gets or Sets WindKph
        /// </summary>
        [DataMember(Name="wind_kph", EmitDefaultValue=false)]
        public decimal? WindKph { get; set; }

        /// <summary>
        /// Gets or Sets WindDegree
        /// </summary>
        [DataMember(Name="wind_degree", EmitDefaultValue=false)]
        public int? WindDegree { get; set; }

        /// <summary>
        /// Gets or Sets WindDir
        /// </summary>
        [DataMember(Name="wind_dir", EmitDefaultValue=false)]
        public string WindDir { get; set; }

        /// <summary>
        /// Gets or Sets PressureMb
        /// </summary>
        [DataMember(Name="pressure_mb", EmitDefaultValue=false)]
        public int? PressureMb { get; set; }

        /// <summary>
        /// Gets or Sets PressureIn
        /// </summary>
        [DataMember(Name="pressure_in", EmitDefaultValue=false)]
        public decimal? PressureIn { get; set; }

        /// <summary>
        /// Gets or Sets PrecipMm
        /// </summary>
        [DataMember(Name="precip_mm", EmitDefaultValue=false)]
        public int? PrecipMm { get; set; }

        /// <summary>
        /// Gets or Sets PrecipIn
        /// </summary>
        [DataMember(Name="precip_in", EmitDefaultValue=false)]
        public int? PrecipIn { get; set; }

        /// <summary>
        /// Gets or Sets Humidity
        /// </summary>
        [DataMember(Name="humidity", EmitDefaultValue=false)]
        public int? Humidity { get; set; }

        /// <summary>
        /// Gets or Sets Cloud
        /// </summary>
        [DataMember(Name="cloud", EmitDefaultValue=false)]
        public int? Cloud { get; set; }

        /// <summary>
        /// Gets or Sets FeelslikeC
        /// </summary>
        [DataMember(Name="feelslike_c", EmitDefaultValue=false)]
        public decimal? FeelslikeC { get; set; }

        /// <summary>
        /// Gets or Sets FeelslikeF
        /// </summary>
        [DataMember(Name="feelslike_f", EmitDefaultValue=false)]
        public decimal? FeelslikeF { get; set; }

        /// <summary>
        /// Gets or Sets WindchillC
        /// </summary>
        [DataMember(Name="windchill_c", EmitDefaultValue=false)]
        public decimal? WindchillC { get; set; }

        /// <summary>
        /// Gets or Sets WindchillF
        /// </summary>
        [DataMember(Name="windchill_f", EmitDefaultValue=false)]
        public decimal? WindchillF { get; set; }

        /// <summary>
        /// Gets or Sets HeatindexC
        /// </summary>
        [DataMember(Name="heatindex_c", EmitDefaultValue=false)]
        public decimal? HeatindexC { get; set; }

        /// <summary>
        /// Gets or Sets HeatindexF
        /// </summary>
        [DataMember(Name="heatindex_f", EmitDefaultValue=false)]
        public decimal? HeatindexF { get; set; }

        /// <summary>
        /// Gets or Sets DewpointC
        /// </summary>
        [DataMember(Name="dewpoint_c", EmitDefaultValue=false)]
        public decimal? DewpointC { get; set; }

        /// <summary>
        /// Gets or Sets DewpointF
        /// </summary>
        [DataMember(Name="dewpoint_f", EmitDefaultValue=false)]
        public decimal? DewpointF { get; set; }

        /// <summary>
        /// Gets or Sets WillItRain
        /// </summary>
        [DataMember(Name="will_it_rain", EmitDefaultValue=false)]
        public int? WillItRain { get; set; }

        /// <summary>
        /// Gets or Sets ChanceOfRain
        /// </summary>
        [DataMember(Name="chance_of_rain", EmitDefaultValue=false)]
        public int? ChanceOfRain { get; set; }

        /// <summary>
        /// Gets or Sets WillItSnow
        /// </summary>
        [DataMember(Name="will_it_snow", EmitDefaultValue=false)]
        public int? WillItSnow { get; set; }

        /// <summary>
        /// Gets or Sets ChanceOfSnow
        /// </summary>
        [DataMember(Name="chance_of_snow", EmitDefaultValue=false)]
        public int? ChanceOfSnow { get; set; }

        /// <summary>
        /// Gets or Sets VisKm
        /// </summary>
        [DataMember(Name="vis_km", EmitDefaultValue=false)]
        public int? VisKm { get; set; }

        /// <summary>
        /// Gets or Sets VisMiles
        /// </summary>
        [DataMember(Name="vis_miles", EmitDefaultValue=false)]
        public int? VisMiles { get; set; }

        /// <summary>
        /// Gets or Sets GustMph
        /// </summary>
        [DataMember(Name="gust_mph", EmitDefaultValue=false)]
        public int? GustMph { get; set; }

        /// <summary>
        /// Gets or Sets GustKph
        /// </summary>
        [DataMember(Name="gust_kph", EmitDefaultValue=false)]
        public decimal? GustKph { get; set; }

        /// <summary>
        /// Gets or Sets Uv
        /// </summary>
        [DataMember(Name="uv", EmitDefaultValue=false)]
        public double? Uv { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ForecastHour {\n");
            sb.Append("  TimeEpoch: ").Append(TimeEpoch).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  TempC: ").Append(TempC).Append("\n");
            sb.Append("  TempF: ").Append(TempF).Append("\n");
            sb.Append("  IsDay: ").Append(IsDay).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  WindMph: ").Append(WindMph).Append("\n");
            sb.Append("  WindKph: ").Append(WindKph).Append("\n");
            sb.Append("  WindDegree: ").Append(WindDegree).Append("\n");
            sb.Append("  WindDir: ").Append(WindDir).Append("\n");
            sb.Append("  PressureMb: ").Append(PressureMb).Append("\n");
            sb.Append("  PressureIn: ").Append(PressureIn).Append("\n");
            sb.Append("  PrecipMm: ").Append(PrecipMm).Append("\n");
            sb.Append("  PrecipIn: ").Append(PrecipIn).Append("\n");
            sb.Append("  Humidity: ").Append(Humidity).Append("\n");
            sb.Append("  Cloud: ").Append(Cloud).Append("\n");
            sb.Append("  FeelslikeC: ").Append(FeelslikeC).Append("\n");
            sb.Append("  FeelslikeF: ").Append(FeelslikeF).Append("\n");
            sb.Append("  WindchillC: ").Append(WindchillC).Append("\n");
            sb.Append("  WindchillF: ").Append(WindchillF).Append("\n");
            sb.Append("  HeatindexC: ").Append(HeatindexC).Append("\n");
            sb.Append("  HeatindexF: ").Append(HeatindexF).Append("\n");
            sb.Append("  DewpointC: ").Append(DewpointC).Append("\n");
            sb.Append("  DewpointF: ").Append(DewpointF).Append("\n");
            sb.Append("  WillItRain: ").Append(WillItRain).Append("\n");
            sb.Append("  ChanceOfRain: ").Append(ChanceOfRain).Append("\n");
            sb.Append("  WillItSnow: ").Append(WillItSnow).Append("\n");
            sb.Append("  ChanceOfSnow: ").Append(ChanceOfSnow).Append("\n");
            sb.Append("  VisKm: ").Append(VisKm).Append("\n");
            sb.Append("  VisMiles: ").Append(VisMiles).Append("\n");
            sb.Append("  GustMph: ").Append(GustMph).Append("\n");
            sb.Append("  GustKph: ").Append(GustKph).Append("\n");
            sb.Append("  Uv: ").Append(Uv).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ForecastHour);
        }

        /// <summary>
        /// Returns true if ForecastHour instances are equal
        /// </summary>
        /// <param name="input">Instance of ForecastHour to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForecastHour input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TimeEpoch == input.TimeEpoch ||
                    (this.TimeEpoch != null &&
                    this.TimeEpoch.Equals(input.TimeEpoch))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.TempC == input.TempC ||
                    (this.TempC != null &&
                    this.TempC.Equals(input.TempC))
                ) && 
                (
                    this.TempF == input.TempF ||
                    (this.TempF != null &&
                    this.TempF.Equals(input.TempF))
                ) && 
                (
                    this.IsDay == input.IsDay ||
                    (this.IsDay != null &&
                    this.IsDay.Equals(input.IsDay))
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.WindMph == input.WindMph ||
                    (this.WindMph != null &&
                    this.WindMph.Equals(input.WindMph))
                ) && 
                (
                    this.WindKph == input.WindKph ||
                    (this.WindKph != null &&
                    this.WindKph.Equals(input.WindKph))
                ) && 
                (
                    this.WindDegree == input.WindDegree ||
                    (this.WindDegree != null &&
                    this.WindDegree.Equals(input.WindDegree))
                ) && 
                (
                    this.WindDir == input.WindDir ||
                    (this.WindDir != null &&
                    this.WindDir.Equals(input.WindDir))
                ) && 
                (
                    this.PressureMb == input.PressureMb ||
                    (this.PressureMb != null &&
                    this.PressureMb.Equals(input.PressureMb))
                ) && 
                (
                    this.PressureIn == input.PressureIn ||
                    (this.PressureIn != null &&
                    this.PressureIn.Equals(input.PressureIn))
                ) && 
                (
                    this.PrecipMm == input.PrecipMm ||
                    (this.PrecipMm != null &&
                    this.PrecipMm.Equals(input.PrecipMm))
                ) && 
                (
                    this.PrecipIn == input.PrecipIn ||
                    (this.PrecipIn != null &&
                    this.PrecipIn.Equals(input.PrecipIn))
                ) && 
                (
                    this.Humidity == input.Humidity ||
                    (this.Humidity != null &&
                    this.Humidity.Equals(input.Humidity))
                ) && 
                (
                    this.Cloud == input.Cloud ||
                    (this.Cloud != null &&
                    this.Cloud.Equals(input.Cloud))
                ) && 
                (
                    this.FeelslikeC == input.FeelslikeC ||
                    (this.FeelslikeC != null &&
                    this.FeelslikeC.Equals(input.FeelslikeC))
                ) && 
                (
                    this.FeelslikeF == input.FeelslikeF ||
                    (this.FeelslikeF != null &&
                    this.FeelslikeF.Equals(input.FeelslikeF))
                ) && 
                (
                    this.WindchillC == input.WindchillC ||
                    (this.WindchillC != null &&
                    this.WindchillC.Equals(input.WindchillC))
                ) && 
                (
                    this.WindchillF == input.WindchillF ||
                    (this.WindchillF != null &&
                    this.WindchillF.Equals(input.WindchillF))
                ) && 
                (
                    this.HeatindexC == input.HeatindexC ||
                    (this.HeatindexC != null &&
                    this.HeatindexC.Equals(input.HeatindexC))
                ) && 
                (
                    this.HeatindexF == input.HeatindexF ||
                    (this.HeatindexF != null &&
                    this.HeatindexF.Equals(input.HeatindexF))
                ) && 
                (
                    this.DewpointC == input.DewpointC ||
                    (this.DewpointC != null &&
                    this.DewpointC.Equals(input.DewpointC))
                ) && 
                (
                    this.DewpointF == input.DewpointF ||
                    (this.DewpointF != null &&
                    this.DewpointF.Equals(input.DewpointF))
                ) && 
                (
                    this.WillItRain == input.WillItRain ||
                    (this.WillItRain != null &&
                    this.WillItRain.Equals(input.WillItRain))
                ) && 
                (
                    this.ChanceOfRain == input.ChanceOfRain ||
                    (this.ChanceOfRain != null &&
                    this.ChanceOfRain.Equals(input.ChanceOfRain))
                ) && 
                (
                    this.WillItSnow == input.WillItSnow ||
                    (this.WillItSnow != null &&
                    this.WillItSnow.Equals(input.WillItSnow))
                ) && 
                (
                    this.ChanceOfSnow == input.ChanceOfSnow ||
                    (this.ChanceOfSnow != null &&
                    this.ChanceOfSnow.Equals(input.ChanceOfSnow))
                ) && 
                (
                    this.VisKm == input.VisKm ||
                    (this.VisKm != null &&
                    this.VisKm.Equals(input.VisKm))
                ) && 
                (
                    this.VisMiles == input.VisMiles ||
                    (this.VisMiles != null &&
                    this.VisMiles.Equals(input.VisMiles))
                ) && 
                (
                    this.GustMph == input.GustMph ||
                    (this.GustMph != null &&
                    this.GustMph.Equals(input.GustMph))
                ) && 
                (
                    this.GustKph == input.GustKph ||
                    (this.GustKph != null &&
                    this.GustKph.Equals(input.GustKph))
                ) && 
                (
                    this.Uv == input.Uv ||
                    (this.Uv != null &&
                    this.Uv.Equals(input.Uv))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimeEpoch != null)
                    hashCode = hashCode * 59 + this.TimeEpoch.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.TempC != null)
                    hashCode = hashCode * 59 + this.TempC.GetHashCode();
                if (this.TempF != null)
                    hashCode = hashCode * 59 + this.TempF.GetHashCode();
                if (this.IsDay != null)
                    hashCode = hashCode * 59 + this.IsDay.GetHashCode();
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.WindMph != null)
                    hashCode = hashCode * 59 + this.WindMph.GetHashCode();
                if (this.WindKph != null)
                    hashCode = hashCode * 59 + this.WindKph.GetHashCode();
                if (this.WindDegree != null)
                    hashCode = hashCode * 59 + this.WindDegree.GetHashCode();
                if (this.WindDir != null)
                    hashCode = hashCode * 59 + this.WindDir.GetHashCode();
                if (this.PressureMb != null)
                    hashCode = hashCode * 59 + this.PressureMb.GetHashCode();
                if (this.PressureIn != null)
                    hashCode = hashCode * 59 + this.PressureIn.GetHashCode();
                if (this.PrecipMm != null)
                    hashCode = hashCode * 59 + this.PrecipMm.GetHashCode();
                if (this.PrecipIn != null)
                    hashCode = hashCode * 59 + this.PrecipIn.GetHashCode();
                if (this.Humidity != null)
                    hashCode = hashCode * 59 + this.Humidity.GetHashCode();
                if (this.Cloud != null)
                    hashCode = hashCode * 59 + this.Cloud.GetHashCode();
                if (this.FeelslikeC != null)
                    hashCode = hashCode * 59 + this.FeelslikeC.GetHashCode();
                if (this.FeelslikeF != null)
                    hashCode = hashCode * 59 + this.FeelslikeF.GetHashCode();
                if (this.WindchillC != null)
                    hashCode = hashCode * 59 + this.WindchillC.GetHashCode();
                if (this.WindchillF != null)
                    hashCode = hashCode * 59 + this.WindchillF.GetHashCode();
                if (this.HeatindexC != null)
                    hashCode = hashCode * 59 + this.HeatindexC.GetHashCode();
                if (this.HeatindexF != null)
                    hashCode = hashCode * 59 + this.HeatindexF.GetHashCode();
                if (this.DewpointC != null)
                    hashCode = hashCode * 59 + this.DewpointC.GetHashCode();
                if (this.DewpointF != null)
                    hashCode = hashCode * 59 + this.DewpointF.GetHashCode();
                if (this.WillItRain != null)
                    hashCode = hashCode * 59 + this.WillItRain.GetHashCode();
                if (this.ChanceOfRain != null)
                    hashCode = hashCode * 59 + this.ChanceOfRain.GetHashCode();
                if (this.WillItSnow != null)
                    hashCode = hashCode * 59 + this.WillItSnow.GetHashCode();
                if (this.ChanceOfSnow != null)
                    hashCode = hashCode * 59 + this.ChanceOfSnow.GetHashCode();
                if (this.VisKm != null)
                    hashCode = hashCode * 59 + this.VisKm.GetHashCode();
                if (this.VisMiles != null)
                    hashCode = hashCode * 59 + this.VisMiles.GetHashCode();
                if (this.GustMph != null)
                    hashCode = hashCode * 59 + this.GustMph.GetHashCode();
                if (this.GustKph != null)
                    hashCode = hashCode * 59 + this.GustKph.GetHashCode();
                if (this.Uv != null)
                    hashCode = hashCode * 59 + this.Uv.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
